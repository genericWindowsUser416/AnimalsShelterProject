@rendermode InteractiveServer
@using HomelessAnimalsShelter.UI.Components.Items
@using HomelessAnimalsShelter.BLL
@using HomelessAnimalsShelter.Core.Dtos
@using HomelessAnimalsShelter.Core.Models
<style>

    .animal-cards {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px 20px;
    }

    .long-break {
        border: none;
        height: 6px;    
        background-color: transparent;
        width: 100%;
        margin: 20px 0;
    }

</style>

@code {

    [Parameter]
    public string Name { get; set; } = "-";

    [Parameter]
    public int Id { get; set; } = 0;

    private List<DonationOutputModel> donations;
    private DonationManager donationManager = new DonationManager();

    private List<AnimalCardOutputModel> animals;
    private AnimalManager animalManager = new AnimalManager();

    protected override void OnInitialized()
    {
        donations = donationManager.GetDonationsByShelterId(@Id);
        animals = animalManager.GetAnimalsByShelterId(@Id);
    }
}

<ShelterCardTopPartBuyer Name="@Name" />
<hr class="long-break">

@if (donations != null && donations.Any())
{
    @foreach (var donation in donations)
    {
        <ShelterDonationCard
            Name="@donation.Name"
            Id="@donation.Id"
            Description="@donation.Description"
            NeededMoney="@donation.NeededMoney"
            CollectedMoney="@donation.CollectedMoney">
        </ShelterDonationCard>
    }
}

<hr class="long-break">

<div class="animal-cards">

    @if (animals != null && animals.Any())
    {
        @foreach (var animal in animals)
        {
            <AnimalCard 
                Name = "@animal.Name"
                Id = "@animal.Id"
            >
            </AnimalCard>
        }
    }

</div>
<hr class="long-break">
<hr class="long-break">
