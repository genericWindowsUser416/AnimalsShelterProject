@using HomelessAnimalsShelter.BLL
@using HomelessAnimalsShelter.UI.Components.Items
@using HomelessAnimalsShelter.Core.Models
@using System.ComponentModel.DataAnnotations

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


@page "/animalSell"
@rendermode InteractiveServer

@code {
    private Dictionary<string, bool> TagList = new Dictionary<string, bool>();
    private AnimalManager animalManager = new AnimalManager();
    private AnimalModel animalModel = new AnimalModel();
    private ShelterManager shelterManager = new ShelterManager();
    public string InputtedTagName;
    private ShelterOutputModel shelter;
    
    private void Logout()
    {
        Console.WriteLine("Пользователь вышел из системы");
    }

    private void HandleSubmit()
    {

        var trueValues = new List<string>();
        foreach (var key in TagList.Keys)
        {
            if (TagList[key])
            {
                Console.WriteLine($"Key: {key}, Value: {TagList[key]}");
                trueValues.Add(key);
            }
        }

        
        // shelter = shelterManager.GetShelterById(1);
        // animalManager.SendAnimalToBase(new AnimalInputModel
        // {
        //         Name = animalModel.Name,
        //         Description = animalModel.Description,
        //         Id = 3,
        //         TagDtos = trueValues,
        //         // Shelter = shelter 
        // }
        // );
        // Console.WriteLine($"Заявка создана: {animalModel.Name}, {animalModel.Description}");
        // foreach (var tag in TagList)
        // {
        //     if (tag.Value)
        //     {
        //         Console.WriteLine($"Selected Tag: {tag.Key}");
        //     }
        // }
    }

    public class AnimalModel
    {
        [Required(ErrorMessage = "Поле обязательно!")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Добавьте описание!")]
        public string Description { get; set; }
    }

    private List<TagOutputModel> tags;
    private TagManager tagManager = new TagManager();

    protected override void OnInitialized()
    {
        tags = tagManager.GetAllTags();
        foreach (var tag in tags)
        {
            Console.WriteLine($"TAG ID " + tag.Id );
            Console.WriteLine($"TAG NAME " + tag.Name );
            TagList.Add(tag.Name, false);
            Console.WriteLine(" ");
            // foreach (var animal in tag.AnimalList)
            // {
            //     Console.WriteLine($"Animal " + animal);
            // }

        }
        // TagList.Add("Белое", false);
        // TagList.Add("Собака", false);
        // TagList.Add("Маленькое", false);
        // TagList.Add("Кот", false);
        // TagList.Add("Быстрое", false);
        // TagList.Add("Медленное", false);
        // TagList.Add("Большое", false);
        // TagList.Add("Прожорливое", false);
        // TagList.Add("Чёрное", false);
        // TagList.Add("Кошка", false);
    }

}

<nav class="toolbar">
    <ul class="nav-list">
        <li><a href="#" class="nav-link">Ваши пожертвования</a></li>
        <li><a href="#" class="nav-link">Ваши передачи в добрые руки</a></li>
        <li><a href="#" class="nav-link">Ваш приют</a></li>
        <li><button @onclick="Logout" class="logout-btn">ВЫЙТИ ИЗ СИСТЕМЫ</button></li>
    </ul>
</nav>

<AuthorizeView Roles="Seller" Context="coolContextName">
    <Authorized>

<h3>Создание заявки на продажу животного</h3>
<EditForm Model="@animalModel" OnValidSubmit="HandleSubmit" FormName="animanSubmitForm" class="form-container">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="left-column">
        <div class="form-group">
            <label>Имя животного:</label>
            <InputText @bind-Value="animalModel.Name"
                       placeholder="Введите имя"
                       class="form-control" />
            <br />
        </div>

        <div class="form-group">
            <label>Выберите теги:</label>
            <InputText @bind-Value="InputtedTagName" placeholder="Введите название тега" class="form-control" id="inputField" />

            <div class="tag-list-container" id="tagListElement">
                @foreach (var item in TagList.Keys.ToList())
                {
                    <label class="tag-item">
                        <input type="checkbox" @bind="TagList[item]" /> @item
                    </label>
                }
            </div>



        </div>
    </div>

    <div class="right-column">
        <div class="form-group">
            <label>Описание животного:</label>
            <InputTextArea @bind-Value="animalModel.Description"
                           placeholder="Опишите животное"
                           class="form-control"
                           rows="8" />
        </div>
        <label for="avatar">Загрузите картинку:</label>

        <input type="file" accept="image/png, image/jpeg" onchange="loadFile(event)">
        <img id="output" class="output-image" />
        <script>
            var loadFile = function (event) 
            {
                var output = document.getElementById('output');
                output.src = URL.createObjectURL(event.target.files[0]);
                output.onload = function () 
                {
                    URL.revokeObjectURL(output.src) // free memory
                }
            };
        </script>


    </div>
    <button type="submit" class="create-button">
        СОЗДАТЬ
    </button>
    <script>
        function filterTags() {
            const inputField = document.getElementById('inputField');
            const filter = inputField.value.toLowerCase();
            const tagList = document.getElementById('tagListElement');
            const tags = tagList.getElementsByClassName('tag-item');

            Array.from(tags).forEach(tag => {
                const tagText = tag.innerText.toLowerCase();
                if (tagText.includes(filter)) {
                    tag.style.display = 'block'; // Show the tag
                } else {
                    tag.style.display = 'none'; // Hide the tag
                    console.log("A tag was hidden!");
                }
            });
        }

        document.getElementById('inputField').addEventListener('input', filterTags);
    </script>

</EditForm>

    </Authorized>
    <NotAuthorized>
        <p>Вы должны быть авторизованы как продавец для просмотра этой страницы</p>
    </NotAuthorized>
</AuthorizeView>

<style>
    .toolbar {
        background-color: #f5f5f5;
        padding: 1rem 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .nav-list {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        gap: 2rem;
        align-items: center;
    }

    .nav-link {
        text-decoration: none;
        color: #333;
        font-size: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        transition: background-color 0.3s;
        background: dodgerblue;
        color: white;
    }

        .nav-link:hover {
            background-color: DeepSkyBlue;
            transform: translateY(-1px);
        }

    .logout-btn {
        margin-left: auto;
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.5rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s;
    }

        .logout-btn:hover {
            background-color: #bb2d3b;
            transform: translateY(-1px);
        }

    h3 {
        font-size: 36px;
        margin-bottom: 1.5rem;
    }

    .form-container {
        display: flex;
        gap: 2rem;
        align-items: flex-start;
        font-size: 1.1rem;
    }

    .left-column {
        flex: 1;
        min-width: 300px;
    }

    .right-column {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }



    .create-button {
        width: 300px;
        height: 150px;
        background: dodgerblue;
        font-size: 20px;
        border-radius: 10px;
        position: absolute;
        bottom: 20px;
        right: 20px;
    }

        .create-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }

    .form-group label {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        font-size: 1.1rem;
        padding: 12px;
        width: 100%;
        border: 2px solid #ddd;
        border-radius: 8px;
    }

    .tag-list-container {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
    }

    .output-image {
        max-width: 100%;
        max-height: 300px;
        object-fit: contain;
        display: block;
        margin-top: 10px;
    }

    @@media (max-width: 768px) {
        .form-container {
            flex-direction: column;
            font-size: 1rem;
        }

        .create-button {
            width: 100%;
            padding: 18px;
        }
    }
</style>